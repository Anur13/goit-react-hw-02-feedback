{"version":3,"sources":["Components/FeedbackOptions/Notification-message/NotificationMessage.module.css","Components/FeedbackOptions/FeedBack-Statistics/FeedBackStatistics.js","Components/FeedbackOptions/FeedBack-Buttons/FeedBackButtons.js","Components/FeedbackOptions/Notification-message/NotificationMessage.js","App.js","index.js","Components/FeedbackOptions/FeedBack-Statistics/FeedBackStatistics.module.css","Components/FeedbackOptions/FeedBack-Buttons/FeedBackButtons.module.css"],"names":["module","exports","FeedBackStatistics","good","neutral","bad","totalFeedback","positiveFeedback","className","styles","statisticsContainer","statisticsList","statisticsListItem","FeedBackButtons","Function","ButtonType","type","optionButton","onClick","event","NotificationMessage","notificationMessage","App","state","increment","setState","prevState","stateKeyNames","Object","keys","this","countTotalFeedback","values","reduce","acc","value","Math","round","map","item","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gIACAA,EAAOC,QAAU,CAAC,oBAAsB,mD,2KCoCzBC,EAjCY,SAAC,GAMrB,IALLC,EAKI,EALJA,KACAC,EAII,EAJJA,QACAC,EAGI,EAHJA,IACAC,EAEI,EAFJA,cACAC,EACI,EADJA,iBAEA,OACE,sBAAKC,UAAWC,IAAOC,oBAAvB,UACE,4CACA,qBAAIF,UAAWC,IAAOE,eAAtB,UACE,qBAAIH,UAAWC,IAAOG,mBAAtB,mBAAiDT,KACjD,qBAAIK,UAAWC,IAAOG,mBAAtB,sBAAoDR,KACpD,qBAAII,UAAWC,IAAOG,mBAAtB,kBAAgDP,KAChD,qBAAIG,UAAWC,IAAOG,mBAAtB,6BACmBN,KAEnB,qBAAIE,UAAWC,IAAOG,mBAAtB,gCACsBL,EADtB,c,gBCAOM,EAjBS,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,SAAUC,EAAiB,EAAjBA,WAInC,OACE,mCACE,wBAAQC,KAAK,SAASR,UAAWC,IAAOQ,aAAcC,QALxC,SAAAC,GAChBL,EAASC,IAIP,SACGA,O,iBCAMK,EARa,WAC1B,OACE,mCACE,sBAAMZ,UAAWC,IAAOY,oBAAxB,kCCgESC,E,4MAhEbC,MAAQ,CACNpB,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPmB,UAAY,SAAAT,GACV,EAAKU,UAAS,SAAAC,GACZ,OAAO,eAAGX,EAAaW,EAAUX,GAAc,O,4CAInD,WAAU,IAAD,OACDY,EAAgBC,OAAOC,KAAKC,KAAKP,OAEjCQ,EAAqBH,OAAOI,OAAOF,KAAKP,OAAOU,QACnD,SAACC,EAAKC,GAAN,OAAiBD,EAAOC,IACxB,GAGI5B,EAAmB6B,KAAKC,MAC3BP,KAAKP,MAAMpB,KAAO4B,EAAsB,KAE3C,OACE,sBAAKvB,UAAU,YAAf,UACE,uDACA,8BACGmB,EAAcW,KAAI,SAAAC,GACjB,OACE,cAAC,EAAD,CAEExB,WAAYwB,EACZzB,SAAU,EAAKU,WAFVe,QAoBZR,EAAqB,EACpB,cAAC,EAAD,aACEzB,cAAeyB,EACfxB,iBAAkBA,GACduB,KAAKP,QAGX,cAAC,EAAD,W,GA1DQiB,aCAlBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U,kBCR1B7C,EAAOC,QAAU,CAAC,eAAiB,2CAA2C,mBAAqB,iD,kBCAnGD,EAAOC,QAAU,CAAC,aAAe,yC","file":"static/js/main.f8083e8f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"notificationMessage\":\"NotificationMessage_notificationMessage__l_V9T\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './FeedBackStatistics.module.css';\n\nconst FeedBackStatistics = ({\n  good,\n  neutral,\n  bad,\n  totalFeedback,\n  positiveFeedback,\n}) => {\n  return (\n    <div className={styles.statisticsContainer}>\n      <h2>Statistics</h2>\n      <ul className={styles.statisticsList}>\n        <li className={styles.statisticsListItem}>Good: {good}</li>\n        <li className={styles.statisticsListItem}>Neutral: {neutral}</li>\n        <li className={styles.statisticsListItem}>Bad: {bad}</li>\n        <li className={styles.statisticsListItem}>\n          Total Feedback: {totalFeedback}\n        </li>\n        <li className={styles.statisticsListItem}>\n          Positive Feedback: {positiveFeedback}%\n        </li>\n      </ul>\n    </div>\n  );\n};\n\nFeedBackStatistics.propTypes = {\n  good: PropTypes.number.isRequired,\n  neutral: PropTypes.number.isRequired,\n  bad: PropTypes.number.isRequired,\n  totalFeedback: PropTypes.number.isRequired,\n  positiveFeedback: PropTypes.number.isRequired,\n};\n\nexport default FeedBackStatistics;\n","import React from 'react';\nimport styles from './FeedBackButtons.module.css';\nimport PropTypes from 'prop-types';\n\nconst FeedBackButtons = ({ Function, ButtonType }) => {\n  const increment = event => {\n    Function(ButtonType);\n  };\n  return (\n    <>\n      <button type=\"button\" className={styles.optionButton} onClick={increment}>\n        {ButtonType}\n      </button>\n    </>\n  );\n};\nFeedBackButtons.propTypes = {\n  Function: PropTypes.func.isRequired,\n  ButtonType: PropTypes.string.isRequired,\n};\n\nexport default FeedBackButtons;\n","import React from 'react';\nimport styles from './NotificationMessage.module.css';\n\nconst NotificationMessage = () => {\n  return (\n    <>\n      <span className={styles.notificationMessage}>No feedback given</span>\n    </>\n  );\n};\n\nexport default NotificationMessage;\n","import React, { Component } from 'react';\nimport FeedBackStatistics from './Components/FeedbackOptions/FeedBack-Statistics/FeedBackStatistics';\nimport FeedBackButtons from './Components/FeedbackOptions/FeedBack-Buttons/FeedBackButtons';\nimport NotificationMessage from './Components/FeedbackOptions/Notification-message/NotificationMessage';\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  increment = ButtonType => {\n    this.setState(prevState => {\n      return { [ButtonType]: prevState[ButtonType] + 1 };\n    });\n  };\n\n  render() {\n    const stateKeyNames = Object.keys(this.state);\n\n    const countTotalFeedback = Object.values(this.state).reduce(\n      (acc, value) => (acc += value),\n      0,\n    );\n\n    const positiveFeedback = Math.round(\n      (this.state.good / countTotalFeedback) * 100,\n    );\n    return (\n      <div className=\"container\">\n        <h1>Please leave feedback</h1>\n        <div>\n          {stateKeyNames.map(item => {\n            return (\n              <FeedBackButtons\n                key={item}\n                ButtonType={item}\n                Function={this.increment}\n              />\n            );\n          })}\n          {/* <FeedBackButtons\n            ButtonType={stateKeyNames[0]}\n            Function={this.increment}\n          />\n          <FeedBackButtons\n            ButtonType={stateKeyNames[1]}\n            Function={this.increment}\n          />\n          <FeedBackButtons\n            ButtonType={stateKeyNames[2]}\n            Function={this.increment}\n          /> */}\n        </div>\n\n        {countTotalFeedback > 0 ? (\n          <FeedBackStatistics\n            totalFeedback={countTotalFeedback}\n            positiveFeedback={positiveFeedback}\n            {...this.state}\n          />\n        ) : (\n          <NotificationMessage />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './App.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"statisticsList\":\"FeedBackStatistics_statisticsList__MWTTT\",\"statisticsListItem\":\"FeedBackStatistics_statisticsListItem__2TVUk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"optionButton\":\"FeedBackButtons_optionButton__3Y4XM\"};"],"sourceRoot":""}